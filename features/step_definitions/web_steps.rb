# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.
require 'uri'
require 'cgi'

module WithinHelpers
  def with_scope(locator)
    locator ? within(locator) { yield } : yield
  end
  def press_key(key_code)
    #key code for escape=>27, Key code for enter = 13
    keypress_script = "var e = $.Event('keydown', { keyCode: #{key_code} }); $('body').trigger(e);"
    page.driver.browser.execute_script(keypress_script)
  end
end
World(WithinHelpers)

And /^(?:|I )pause$/ do
  STDIN.getc

  puts "Continuing after pause"
end

And /^I select option with value "(.*)" from element "(.*)"$/ do |value, element_id|
  select(value, :from => element_id)
end

Then /^I uncheck the styled checkbox "([^\"]+)"$/ do |id|
  toggle_styled_checkbox(id, false)
end

Then /^I check the styled checkbox "([^\"]+)"$/ do |id|
  toggle_styled_checkbox(id, true)
end

When /^(?:|I )press "([^\"]*)"(?: within "([^\"]*)")?$/ do |button, selector|
  with_scope(selector) do
    click_button(button)
  end
end

When /^(?:|I )follow "([^\"]*)"(?: within "([^\"]*)")?$/ do |link, selector|
  with_scope(selector) do
    click_link(link)
  end
end

When /^(?:|I )fill in "([^\"]*)" with "([^\"]*)"(?: within "([^\"]*)")?$/ do |field, value, selector|
  with_scope(selector) do
    fill_in(field, :with => value)
  end
end


When /^I Press the termsandconditions title "([^\"]+)"$/ do |link|
find(link).click
end




When /^(?:|I )fill in "([^\"]*)" for "([^\"]*)"(?: within "([^\"]*)")?$/ do |value, field, selector|
  with_scope(selector) do
    fill_in(field, :with => value)
  end
end

# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select og option
# based on naming conventions.
#
When /^(?:|I )fill in the following(?: within "([^\"]*)")?:$/ do |selector, fields|
  with_scope(selector) do
    fields.rows_hash.each do |name, value|
      When %{I fill in "#{name}" with "#{value}"}
    end
  end
end

When /^(?:|I )select "([^\"]*)" from "([^\"]*)"(?: within "([^\"]*)")?$/ do |value, field, selector|
  with_scope(selector) do
    select(value, :from => field)
  end
end

When /^(?:|I )check "([^\"]*)"(?: within "([^\"]*)")?$/ do |field, selector|
  with_scope(selector) do
    check(field)
  end
end

When /^(?:|I )uncheck "([^\"]*)"(?: within "([^\"]*)")?$/ do |field, selector|
  with_scope(selector) do
    uncheck(field)
  end
end

When /^(?:|I )choose "([^\"]*)"(?: within "([^\"]*)")?$/ do |field, selector|
  with_scope(selector) do
    choose(field)
  end
end

When /^(?:|I )attach the file "([^\"]*)" to "([^\"]*)"(?: within "([^\"]*)")?$/ do |path, field, selector|
  with_scope(selector) do
    attach_file(field, path)
  end
end

Then /^(?:|I )should see JSON:$/ do |expected_json|
  require 'json'
  expected = JSON.pretty_generate(JSON.parse(expected_json))
  actual   = JSON.pretty_generate(JSON.parse(response.body))
  expected.should == actual
end

Then /^(?:|I )should see "([^\"]*)"(?: within "([^\"]*)")?$/ do |text, selector|
  with_scope(selector) do
    if page.respond_to? :should
      expect(page).to have_content(text)
    else
      assert page.has_content?(text)
    end
  end
end

Then /^(?:|I )should see \/([^\/]*)\/(?: within "([^\"]*)")?$/ do |regexp, selector|
  regexp = Regexp.new(regexp)
  with_scope(selector) do
    if page.respond_to? :should
      expect(page).to have_xpath('//*', :text => regexp)
    else
      assert page.has_xpath?('//*', :text => regexp)
    end
  end
end

Then /^(?:|I )should not see "([^\"]*)"(?: within "([^\"]*)")?$/ do |text, selector|
  Capybara.ignore_hidden_elements = true
  with_scope(selector) do
    if page.respond_to? :should
      expect(page).to have_no_content(text)
    else
      assert page.has_no_content?(text)
    end
  end
  Capybara.ignore_hidden_elements = false
end

Then /^(?:|I )should not see \/([^\/]*)\/(?: within "([^\"]*)")?$/ do |regexp, selector|
  regexp = Regexp.new(regexp)
  with_scope(selector) do
    if page.respond_to? :should
      expect(page).to have_no_xpath('//*', :text => regexp)
    else
      assert page.has_no_xpath?('//*', :text => regexp)
    end
  end
end

Then /^the "([^\"]*)" field(?: within "([^\"]*)")? should contain "([^\"]*)"$/ do |field, selector, value|
  with_scope(selector) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should
      expect(field_value).to match(/#{value}/)
    else
      assert_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^\"]*)" field(?: within "([^\"]*)")? should not contain "([^\"]*)"$/ do |field, selector, value|
  with_scope(selector) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should_not
      expect(field_value).to match(/#{value}/)
    else
      assert_no_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^\"]*)" checkbox(?: within "([^\"]*)")? should be checked$/ do |label, selector|
  with_scope(selector) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should == 'checked'
    else
      assert_equal 'checked', field_checked
    end
  end
end

Then /^the "([^\"]*)" checkbox(?: within "([^\"]*)")? should not be checked$/ do |label, selector|
  with_scope(selector) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should_not
      expect(field_checked).not_to be('checked')
    else
      assert_not_equal 'checked', field_checked
    end
  end
end

Then /^(?:|I )should have the following query string:$/ do |expected_pairs|
  query = URI.parse(current_url).query
  actual_params = query ? CGI.parse(query) : {}
  expected_params = {}
  expected_pairs.rows_hash.each_pair{|k,v| expected_params[k] = v.split(',')}

  if actual_params.respond_to? :should
    actual_params.should == expected_params
  else
    assert_equal expected_params, actual_params
  end
end

When /^(?:|I )press by id "([^\"]*)"(?: within "([^\"]*)")?$/ do |link, selector|
  with_scope(selector) do
    find_by_id(link).click
  end
end

Then /^show me the page$/ do
  save_and_open_page
end

Given /^I enter valid credit card details$/ do
  step %Q{I fill in "cardHolderName" with "John Smith"}
  step %Q{I fill in "cardNo" with "4111111111111111"}
  step %Q{I fill in "cardExpiry" with "0115"}
  step %Q{I fill in "cardSecureId" with "123"}
end


def authenticate_dialog
  #Get the main window handle
  main = page.driver.browser.window_handles.first
  #Get the popup window handle
  popup = page.driver.browser.window_handles.last

  #Then switch control between the windows
  page.driver.browser.switch_to.window(popup)

  page.within_window(popup) do
    #Normally fill in the form and log in
    fill_in 'User Name:', :with => "vodafone"
    fill_in 'Password:', :with => "digital"
    click_button 'OK'
    page.driver.browser.switch_to.window(main)
  end
end

def accept_dialog
  begin a = page.driver.browser.switch_to.alert
  if a
    a.accept
  end
  rescue Selenium::WebDriver::Error::NoAlertPresentError => e
    # No alert to close, ignore
  end
end

Then /^I should see the following services listed in order$/ do |table|
  table.hashes.each_with_index do |row, i|
    expect(page).to have_selector("#service_id option:nth-child(#{i+1})", :text => row['#{find_msisdn_info(MSISDN_TYPE)}'])
  end
end

Then(/^I should see a link to "(.*?)" within "(.*?)"/) do |link_text, section|
  step %Q{I should see "#{link_text}" within "{section}"}
end

Then(/^I should see a link "(.*?)"$/) do |link_text|
  step %Q{I should see "#{link_text}"}
end

When(/^I fill in "(.*?)" with value of "(.*?)"$/) do |field, value|
  fill_in(field, :with => value)
end

Then /^I change my "([^\"]+)" switch$/ do |id|
  toggle_styled_switch(id)
end

Then /^I see the styled checkbox "([^\"]+)" is checked$/ do |selector|
  find(:field, selector, :checked => true, :visible => false).should be_true
end

Then /^I see the styled checkbox "([^\"]+)" is unchecked$/ do |selector|
  find(:field, selector, :checked => false, :visible => false).should be_true
end

def toggle_styled_switch(id)
  case id
    when "international-calling-status"
      page.execute_script('$("#international-calling-status").click()')
    when "alert-status"
      page.execute_script('$("#alert-status").click()')
    when "global_roaming"
      page.execute_script('$("#global_roaming").click()')
    when "call_conference"
      page.execute_script('$("#call_conference").click()')
    when "outgoing_caller_id"
      page.execute_script('$("#outgoing_caller_id").click()')
  end
end

def toggle_styled_checkbox(id, toggle_on)
  # This assertion wait for the element to appear on the page before we do the clicking
  expect(page).to have_selector("[for='#{id}']", :visible => true)
  checkbox_label = first("[for='#{id}']")
  checkbox = find("##{id}", :visible => false)

  # click checkbox if it needs to be toggled
  if checkbox.checked? && toggle_on == false || checkbox.checked? == false && toggle_on == true
    checkbox_label.click
  end
end

And /^I (accept|dismiss) popup$/ do |action|
  popup = page.driver.browser.switch_to.alert
  popup.send(action)
end

When(/^I see "(.*?)" within "(.*?)"$/) do |text, selector|
  with_scope(selector) do
    page.has_content?(text)
  end
end

When /^(?:|I )fill "([^\"]*)" with "([^\"]*)"(?: within "([^\"]*)")?$/ do |field, value, selector|
  with_scope(selector) do
    fill_in(field, :with => value, :visible => true)
  end




end